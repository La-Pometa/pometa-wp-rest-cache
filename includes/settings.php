<?php
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */


class pometaRestSettings {
	private $pRest_options;

    var $run_settings=array();
    


	public function __construct() {
		add_action( 'admin_menu', array( $this, 'pRest_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'pRest_page_init' ) );
        add_action( 'admin_init', array( $this, 'pRest_settings_callback'));
        add_action( 'admin_notices', array( $this, 'pRest_settings_notices'));
        add_filter( 'pre_update_option_pRest_settings', array($this, 'pRest_save_settings'), 10, 3 );
        add_filter( 'update_option_pRest_settings', array($this, 'pRest_run_settings'), 10, 3 );

        $this->run_settings=array();

        //Si activem 'save_post' => 'clean_cache' al guardar una entrada
        if ( $this->get_option("savepostcleancache_enabled")) {
            add_action('save_post', array( $this, 'pRest_save_post' ));

        }

        $this->thumbnail_sizes=false;
	}
    function pRest_run_settings($old_value,$value,$option) {

        if (  $this->run_settings["update_htaccess_remove"] ) {$this->htaccess_remove();}
        else if ( $this->run_settings["update_htaccess"] ) {$this->htaccess_update();}
        if (  $this->run_settings["update_cache_clean"] ) {pRest_routes_cache_clean($fullpath);}

    }
    function pRest_save_settings($value,$old_value,$option) {

        
        $this->run_settings["update_htaccess"]=false;
        $this->run_settings["update_htaccess_remove"]=false;
        $this->run_settings["update_cache_clean"]=false;
        
        $enabled = get_array_value($value,"enabled","");
        $preenabled = get_array_value($old_value,"enabled","");
        $gzenabled = get_array_value($value,"gzenabled","");
        $pregzenabled = get_array_value($old_value,"gzenabled","");
        $path = get_array_value($value,"path","");
        $prepath = get_array_value($old_value,"path","");
        $patch403 = get_array_value($value,"htaccess_patch_403_enabled","");
        $prepatch403 = get_array_value($old_value,"htaccess_patch_403_enabled","");

        
        if ( $path != $prepath ) {
                    
            if ( $enabled ) {
                $this->run_settings["update_cache_clean"]=true;
                $fullpath = substr($fullpath,0,strlen($fullpath)-strlen($path_slug)).$prepath;
                $this->run_settings["update_htaccess"]=true;

                add_settings_error(
                    'error-run-settings', // setting title
                    'pRest-error', // error ID
                    __("Al modificar la ruta del cache, hem eliminat el cache actual i actualitzades les regles .htaccess amb la nova ruta.","pometaRestltd"),
                    'warning' // type of message
                );
            }
            
        }
        if ( $enabled != $preenabled) {
            if ( !$preenabled ) {
                $this->run_settings["update_htaccess"]=true;
                add_settings_error(
                    'error-run-settings', // setting title
                    'pRest-error', // error ID
                    __("A l'activar el cache, hem afgeit les regles .htaccess al servidor.","pometaRestltd"),
                    'info' // type of message
                );
            }
            else {
                $this->run_settings["update_htaccess_remove"]=true;
                $this->run_settings["update_cache_clean"]=true;
                add_settings_error(
                    'error-run-settings', // setting title
                    'pRest-error', // error ID
                    __("Al desactivar el cache, hem tret les regles .htaccess al servidor i esborrat el cache.","pometaRestltd"),
                    'info' // type of message
                );
            }
        }
        if ( $enabled ) {
            if ( $patch403 != $prepatch403) {
                if ( !$prepatch403 ) {
                    $this->run_settings["update_htaccess"]=true;
                    add_settings_error(
                        'error-run-settings', // setting title
                        'pRest-error', // error ID
                        __("A l'activar el pedaç per a 'Forbidden 403' hem actualitzat les regles .htaccess al servidor i esborrat el cache.","pometaRestltd"),
                        'info' // type of message
                    );
                }
                else {
                    $this->run_settings["update_htaccess_remove"]=true;
                    $this->run_settings["update_cache_clean"]=true;
                    add_settings_error(
                        'error-run-settings', // setting title
                        'pRest-error', // error ID
                        __("Al desactivar el pedaç per a 'Forbidden 403' hem actualitzat les regles .htaccess al servidor i esborrat el cache.","pometaRestltd"),
                        'info' // type of message
                    );
                }
            }
            if ( $gzenabled != $pregzenabled) {
                    $this->run_settings["update_htaccess"]=true;
                    $this->run_settings["update_cache_clean"]=true;

                    if ( $gzenabled ) {
                        add_settings_error(
                            $option['id'], // setting title
                            'pRest-error', // error ID
                            __("A l'activar la compressió, hem esborrat el cache i actualitzat les regles .htaccess al servidor.","pometaRestltd"),
                            'warning' // type of message
                        );
                    }
                    else {
                        add_settings_error(
                            $option['id'], // setting title
                            'pRest-error', // error ID
                            __("Al desactivar la compressió, hem esborrat el cache i actualitzat les regles .htaccess al servidor.","pometaRestltd"),
                            'warning' // type of message
                        );
                    }
                
            }
        }

        return $value;
    }

	public function pRest_add_plugin_page() {
		add_options_page(
			'Pometa API REST Cache', // page_title
			'API REST Cache', // menu_title
			'manage_options', // capability
			'prest', // menu_slug
			array( $this, 'pRest_create_admin_page' ) // function
		);
	}
    public function get_option($name="",$default=false) {
        if ( $this->pRest_options == false ) {
            $this->pRest_options=get_option( 'pRest_settings' );
        }

        return get_array_value($this->pRest_options,$name,$default);

    }
	public function pRest_create_admin_page() {
		    $this->pRest_options = get_option( 'pRest_settings' ); ?>
			<style type="text/css">
                .notice.notice-warning p > span {display: block;}

    	</style>
		<div class="wrap">
            <style type="text/css">
               html[data-theme="dark"] form h2 {color: #ccc;}
            </style>
			<h2>Pometa API REST Cache</h2>
			<p><?php echo __("Pàgina de configuració de <strong>Pometa API REST Cache</strong>","pometaRestltd"); ?></p>
			<?php //settings_errors(); ?>

 
			<form method="post" action="options.php">
				<?php
					settings_fields( 'pRest_option_group' );
					do_settings_sections( 'prest-admin' );
					submit_button();
				?>
			</form>

		</div>
	<?php }

	public function pRest_page_init() {
		register_setting(
			'pRest_option_group', // option_group
			'pRest_settings', // option_name
			array( $this, 'pRest_sanitize' ) // sanitize_callback
		);


		add_settings_section(
			'pRest_setting_enable', // id
			'<hr><br>'.__("Estat del cache:","prestltd"), // title
			array( $this, 'pRest_section_enable' ), // callback
			'prest-admin' // page
		);

		add_settings_section(
			'pRest_setting_expire', // id
			'<hr><br>'.__("Caducitat del cache:","prestltd"), // title
			array( $this, 'pRest_section_expire' ), // callback
			'prest-admin' // page
		);

        add_settings_section(
			'pRest_setting_autoupdate', // id
			'<hr><br>'.__("Actualització del cache:","prestltd"), // title
			array( $this, 'pRest_section_autoupdate' ), // callback
			'prest-admin' // page
		);

		add_settings_section(
			'pRest_setting_advanced', // id
			'<hr><br>'.__("Altres configuracions:","prestltd"), // title
			array( $this, 'pRest_section_advanced' ), // callback
			'prest-admin' // page
		);

		add_settings_field(
			'enabled', // id
			'Estat', // title
			array( $this, 'enabled_callback' ), // callback
			'prest-admin', // page
			'pRest_setting_enable' // section
		);



        add_settings_field(
			'expire_minutes', // id
			'Minuts', // title
			array( $this, 'expire_minutes_callback' ), // callback
			'prest-admin', // page
			'pRest_setting_expire' // section
		);


        add_settings_field(
			'path', // id
			'Carpeta cache', // title
			array( $this, 'path_callback' ), // callback
			'prest-admin', // page
			'pRest_setting_advanced' // section
		);



        add_settings_field(
            'gzenabled', // id
            'Compressió', // title
            array( $this, 'gzenabled_callback' ), // callback
            'prest-admin', // page
            'pRest_setting_advanced' // section
        );


        add_settings_field(
            'savepostcleancache_enabled', // id
            'Esborrar al modificar contingut', // title
            array( $this, 'savepostcleancache_enabled_callback' ), // callback
            'prest-admin', // page
            'pRest_setting_advanced' // section
        );


        add_settings_field(
            'htaccess_patch_403_enabled', // id
            'Apache 403 Forbidden', // title
            array( $this, 'htaccess_patch_403_enabled_callback' ), // callback
            'prest-admin', // page
            'pRest_setting_advanced' // section
        );

        add_settings_field(
			'autoupdate', // id
			__("Actualització automàtica","prestltd"), // title
			array( $this, 'autoupdate_callback' ), // callback
			'prest-admin', // page
			'pRest_setting_autoupdate' // section
		);
		
        add_settings_field(
			'autoupdate_minutes', // id
			__('Minuts','prestltd'), // title
			array( $this, 'autoupdate_minutes_callback' ), // callback
			'prest-admin', // page
			'pRest_setting_autoupdate' // section
		);



	}
    function pRest_bytes_to_human($bytes) {
        if ($bytes >= 1073741824) { $bytes = number_format($bytes / 1073741824, 2) . ' GB'; }
        elseif ($bytes >= 1048576){$bytes = number_format($bytes / 1048576, 2) . ' MB';}
        elseif ($bytes >= 1024){$bytes = number_format($bytes / 1024, 2) . ' KB';}
        elseif ($bytes > 1){$bytes = $bytes . ' bytes';}
        elseif ($bytes == 1){$bytes = $bytes . ' byte';}
        else{$bytes = '0 bytes';}
        return $bytes;
    
    }
    function pRest_settings_notices(){

            $notice =  get_option( 'pRest_settings_notice' );
            if ( $notice ) {
                    delete_option( 'pRest_settings_notice' );
                    echo '<div class="notice notice-warning"><p>';
                    echo $notice;
                    echo '</p></div>';
            }
    }
    function pRest_settings_callback(){


        global $pagenow;
        if ( $pagenow == 'options-general.php' && get_array_value($_GET,"page",false) == "prest") {


            $action = get_array_value($_GET,"action",false);
            $notices=array();

            if ( $action ) {
                if ( $action == "htaccess-update") {
                    $update_htaccess=true;
                    $notices[]=__("Regles .htaccess actualitzades.","pometaRestltd");
                }
                else if ( $action == "cache-clean") {
                    $result = pRestCacheClean(array(),"CLEAN");
                    $files = get_array_value($result,"files",0);;
                    $directories = get_array_value($result,"directories",0);;
                    $notices[]= sprintf(__("Cache esborrat. Eliminats %s arxiu(s) i %d carpeta(es).","pometaRestltd"),$files,$directories);
                }
                else if ( $action == "cache-expire") {
                    $result = pRestCacheClean(array(),"EXPIRE");
                    $files = get_array_value($result,"files",0);;
                    $directories = get_array_value($result,"directories",0);;
                    $notices[]=sprintf(__("Cache purgat. Eliminats %s arxiu(s) i %d carpeta(es) caducats.","pometaRestltd"),$files,$directories);
                }

                else if ( $action == "cache-list") {
                    $result = pRestCacheClean(array(),"LIST");
                    $files = get_array_value($result,"files",0);;
                    $directories = get_array_value($result,"directories",0);;
                    $info = get_array_value($result,"info",array());;
                    $size = 0;
                    $files_html="";
                    $file_remove = pRest_settings_get_path();
                    foreach($info as $pos => $data) {
                        $file_size = get_array_value($data,"size",0);
                        $file_time = get_array_value($data,"time",0);
                        $time = $this->expire_minutes_time($file_time);
                        if ( !$time ) {
                            $time = __(" - Caducat - ","pometaRestltd");
                        }
                        $file = get_array_value($data,"file","-no-file-");
                        $size += $file_size;
                        $files_html.=($files_html?"<br>":"").str_replace($file_remove,"",$file)." (".$this->pRest_bytes_to_human($file_size).") <i style='color:#ccc'>Caduca en ".$time."</i>";
                    }
                    $total = $this->pRest_bytes_to_human($size);
                    if ( $files_html ) {
                        $link_list = add_query_arg(array("page"=>"prest","action"=>"cache-list"),admin_url("options-general.php"));
                        $files_html ='<span class="list">'.$files_html.'</span><br><a href="'.$link_list.'">'.__("Mostrar arxius de nou","pometaRestltd").'</a>';
                    }
                    $notices[]=sprintf(__("Llistat de Cache <br><br> <strong>Total:</strong>  %s arxiu(s) i %s directori(s) <br> <strong>Tamany:</strong> %s. <br><br> <strong>Llista:</strong><br> %s","pometaRestltd"),$files,$directories,$total,$files_html);
                }
                else if ( $action == "cron-activate") {

                    $cron = pRest_Cron_Create();
                    switch($cron) {
                        case "created": 
                            $notices[]=sprintf(__("Cron reactivat.","pometaRestltd"));
                            break;
                        case "already": 
                            $notices[]=sprintf(__("Ja hi ha cron actiu.","pometaRestltd"));
                            break;
                        case "error": 
                            $notices[]=sprintf(__("Cron no s'ha pogut reactivar","pometaRestltd"));
                            break;
                        default:
                            $notices[]=sprintf(__("Error indefinit amb Cron: %s","pometaRestltd"),$cron);

                    }
                }
                
    
                if ( $update_htaccess_remove ) {$this->htaccess_remove();}
                else if ( $update_htaccess) {$this->htaccess_update();}
                if ( $update_cache_clean ) {pRest_routes_cache_clean($fullpath);}
    
                $msg="";
                if ( count($notices)) {
                    foreach($notices as $notice) {
                        $msg.='<span class="info"><strong>API REST Cache:</strong> '.$notice.'</span>';
                    }
                }
                if ( $msg ) {
                    update_option( 'pRest_settings_notice', $msg , 'no' );
                }

                $link_settings = add_query_arg(array("page"=>"prest"),admin_url("options-general.php"));
                wp_safe_redirect($link_settings);
                exit;
            }
        } 
    }

	public function pRest_sanitize($input) {

        $sanitary_values=$input;


		return $sanitary_values;
	}

     
	public function pRest_section_enable() {
        echo "<p>Estableix si està activat o no el cache per a les consultes API REST.</p>";
    }

	public function pRest_section_expire() {
		echo "<p>Estableix quan expira una consulta de API REST per a esborrar la còpia actual i permetre generar una versió nova.</p>";
	}

    public function pRest_section_autoupdate() {
		echo "<p>Estableix si vols mantenir una versió actualitzada de les pàgines en cache de forma automàtica.</p>";
	}


    public function pRest_section_advanced() {
		echo "<p>Més configuracions per a <strong>Pometa API REST Cache</strong>.</p>";
	}

    function pRest_save_post() {
        // Al guardar una entrada, esborrar el cache
        pRestCacheClean(array(),"CLEAN",false);
    }

    

	public function htaccess_patch_403_enabled_callback() {
        $selected = ((isset( $this->pRest_options['htaccess_patch_403_enabled']) && esc_attr( $this->pRest_options['htaccess_patch_403_enabled']) == "on" ) ? 'checked="checked"' : '');
        $msg = __("Si està marcat, es modificarà les regles .htaccess per a modificar el caracter '=' dels paràmetres.","pometaRestltd");
		echo sprintf('<input class="regular-checbox" type="checkbox" name="pRest_settings[htaccess_patch_403_enabled]" id="htaccess_patch_403_enabled" %s> <label for="htaccess_patch_403_enabled">%s</label>',$selected,$msg);
        echo '<p>';
        echo '<i style="font-size:90%;color:#aaa;">'.__("En alguns servidors els directoris amb el caràcter '=' produeixen l'error <b>403 Forbidden</b>. <br>Amb aquesta opció activada, es modifiquen les rutes per a substituir el caràcter per un de vàlid: '-'.","pometaRestltd").'</i>';
        echo '</p>';
    }

	public function savepostcleancache_enabled_callback() {
        $selected = ((isset( $this->pRest_options['savepostcleancache_enabled']) && esc_attr( $this->pRest_options['savepostcleancache_enabled']) == "on" ) ? 'checked="checked"' : '');
        $msg = __("Si està marcat, al modificar o crear nou contingut, el cache s'esborrarà automàticament.","pometaRestltd");
		echo sprintf('<input class="regular-checbox" type="checkbox" name="pRest_settings[savepostcleancache_enabled]" id="savepostcleancache_enabled" %s> <label for="savepostcleancache_enabled">%s</label>',$selected,$msg);
    }

    public function enabled_callback() {
        $selected = ((isset( $this->pRest_options['enabled']) && esc_attr( $this->pRest_options['enabled']) == "on" ) ? 'checked="checked"' : '');
        $msg = __("Si està marcat, el cache està actiu.","pometaRestltd");
		echo sprintf('<input class="regular-checbox" type="checkbox" name="pRest_settings[enabled]" id="enabled" %s> <label for="enabled">%s</label>',$selected,$msg);
        if ( $this->get_option("enabled")){
            $link_update = add_query_arg(array("page"=>"prest","action"=>"htaccess-update"),admin_url("options-general.php"));
            echo '<br><br> <a href="'.$link_update.'" class="button">'.__("Actualitzar .htaccess ara").'</a>';
        }

    }

    public function autoupdate_callback() {
        $selected = ((isset( $this->pRest_options['autoupdate']) && esc_attr( $this->pRest_options['autoupdate']) == "on" ) ? 'checked="checked"' : '');
        $msg = __("Si està marcat, el cache es mantindrà actualitzat de forma automàtica (cron).","pometaRestltd");
		echo sprintf('<input class="regular-checbox" type="checkbox" name="pRest_settings[autoupdate]" id="autoupdate" %s> <label for="autoupdate">%s</label>',$selected,$msg);
        if ( $this->get_option("autoupdate")){
            $link_update = add_query_arg(array("page"=>"prest","action"=>"autoupdate-status"),admin_url("options-general.php"));
            echo '<br><br> <a href="'.$link_update.'" class="button">'.__("Mostrar estat").'</a>';
        }

    }


    public function autoupdate_minutes_callback() {
        $value = get_array_value($this->pRest_options,"autoupdate_minutes",false);
        $placeholder = 120;
        $msg = __("Freqüencia actualització <strong>en minuts</strong> de les pàgines en cache","pometaRestltd");
        echo sprintf('<input class="regular-number" type="number" name="pRest_settings[autoupdate_minutes]" id="autoupdate_minutes" style="width:120px" value="%s" placeholder="%s"> <label for="autoupdate_minutes">%s</label>',$value,$placeholder,$msg);

    }

	public function gzenabled_callback() {
        $disabled="";
        $selected = ((isset( $this->pRest_options['gzenabled']) && esc_attr( $this->pRest_options['gzenabled']) == "on" ) ? 'checked="checked"' : '');
        if ( !function_exists("gzcompress")){
            $disabled='disabled="disabled"';
            $selected='';   
        }
        $msg = __("Si està marcat, es propocionarà versió comprimida.","pometaRestltd");
		echo sprintf('<input class="regular-checbox" type="checkbox" name="pRest_settings[gzenabled]" id="gzenabled" %s %s> <label for="gzenabled">%s</label>',$selected,$disabled,$msg);


    }
    public function expire_minutes() {
        $minutes = get_array_value($this->pRest_options,"expire_minutes",false);
        return $minutes;
    }
    public function expire_minutes_time($time) {
        return pRest_get_expire_time_to($time,pRest_settings_get_file_life_seconds());
    }
    public function expire_minutes_callback() {
        $value = get_array_value($this->pRest_options,"expire_minutes",false);
        $msg = __("Número de <strong>minuts</strong> abans de refrescar cache. 0 per desactivar.","pometaRestltd");

		echo sprintf('<input class="regular-number" type="number" name="pRest_settings[expire_minutes]" id="expire_minutes" style="width:120px" value="%s"> <label for="expire_minutes">%s</label>',$value,$msg);

        if ( $this->get_option("enabled")){
            $link_list = add_query_arg(array("page"=>"prest","action"=>"cache-list"),admin_url("options-general.php"));
            echo '<br><br> <a href="'.$link_list.'" class="button">'.__("Mostrar cache").'</a>';

            $link_expire = add_query_arg(array("page"=>"prest","action"=>"cache-expire"),admin_url("options-general.php"));
            echo ' &nbsp; <a href="'.$link_expire.'" class="button">'.__("Esborrar caducats").'</a>';

            $link_clean = add_query_arg(array("page"=>"prest","action"=>"cache-clean"),admin_url("options-general.php"));
            echo ' &nbsp; <a href="'.$link_clean.'" class="button">'.__("Esborrar tot el cache").'</a>';


            $next = wp_next_scheduled ( 'pRestCacheCron' );

            if ( ! $next ) {
                $link_cron = add_query_arg(array("page"=>"prest","action"=>"cron-activate"),admin_url("options-general.php"));
                echo '<p>'.sprintf(__('No hi ha CRON activat. Fes <a href="%s">click aquí per a reactivar cron</a>','pometaRestltd'),$link_cron).'</p>';

            }
            else {
                $temps = pRest_get_expire_time_to($next);
                echo '<p>';
                echo '<i style="font-size:90%;color:#aaa;">'.sprintf(__("Próxima comprovació de fitxers de cache caducats en: %s","pometaRestltd"),$temps).'</i>';
                echo '</p>';
            }

        }

    
    }

    public function path_placeholder() {
        return pRest_settings_get_path_placeholder();
    }

    public function prepath_callback() {
        $selected = $this->pRest_options['path'];
		echo sprintf('<input class="regular-checbox" type="hidden" name="pRest_settings[_path]" id="_path" value="%s">',$selected);
	}

    public function path_callback() {
        $placeholder = $this->path_placeholder();
        $value = get_array_value($this->pRest_options,"path",false);
        $value_html = (!trim($value) ? $placeholder : $value );
        $msg = __("Carpeta on guardar els arxius de cache.","pometaRestltd");
        //$upload_dir = wp_upload_dir();
        //echo "<br> UPLOAD:<pre>".print_r($upload_dir,true)."</pre>";
        //$path = get_array_value($upload_dir,'basedir',false);
        $path = WP_CONTENT_DIR ."/cache";
        $path = pRest_settings_get_path();
        $path = str_replace("/".$value_html."/","<strong><u>"."/".$value_html."/"."</u></strong>",$path);
        $text = sprintf('<strong>Carpeta arrel:</strong> %s' ,$path);
		$input = sprintf('<input class="regular-text" type="text" name="pRest_settings[path]" placeholder="%s" id="path" style="width:120px" value="%s">',$placeholder,$value);
   
        echo $input;
        echo '<label for="path">'.$msg.'</label>';
        echo "<br>";
        echo '<i style="font-size:90%;color:#aaa;">'.$text.'</i>';

    }
    function htaccess_remove() {
        $this->header_start="# BEGIN RESTCache";
        $this->header_end ="# END RESTCache";
        $wordpress_start = "# BEGIN WordPress";

        $droot = ABSPATH;

        $htaccess_file = $droot.".htaccess";
        if ( file_exists($htaccess_file)) {
            $content = file_get_contents($htaccess_file);
            $parts = explode($this->header_start,$content);
            $start = get_array_value($parts,0,false);
            $mid = get_array_value($parts,1,false);
            $mid_parts = explode($this->header_end,$mid);
            $end = get_array_value($mid_parts,1,false);
            $mid = get_array_value($mid_parts,0,false);

            if ( strpos($start,$wordpress_start)!==false) {
                $end = $start . $end;
                $start = "";
            }

            $newcontent = $start.$end;
            file_put_contents($htaccess_file,$newcontent);


        }
    }

    function htaccess_update() {

        $this->header_start="# BEGIN RESTCache";
        $this->header_end ="# END RESTCache";
        $wordpress_start = "# BEGIN WordPress";


        $path = $this->get_option("path",false);
        if ( !trim($path)) {
            $path=$this->path_placeholder();
        }
        $droot = ABSPATH;
        $document_root = get_array_value($_SERVER,"DOCUMENT_ROOT","");

        //Normalize "public_html";
        $droot = str_replace("/private_html","/public_html",$droot);
        $document_root = str_replace("/private_html","/public_html",$document_root);
        
        $droot = str_replace($document_root,"%{DOCUMENT_ROOT}",$droot);

        $gzenabled = pRest_settings_get_compress_enabled();
        $patch403 = pRest_settings_get_htaccess_patch_403_enabled();
        
        $patch403_params_max = 5;
        $patch403_params_min = 0;
        $patch403_rules="";

        while ( $patch403_params_min < $patch403_params_max ) {
            $patch403_rules.=''.
            "\n".'RewriteCond %{ENV:pRestQS} (.*)\=(.*)'.
            "\n".'RewriteRule . - [E=pRestQS:%1-%2]'.
            ($patch403_params_min?
                "\n".'RewriteCond %{ENV:pRestQS} (.*)\&(.*)'. 
                "\n".'RewriteRule . - [E=pRestQS:%1-%2]'
                :'').
            '';
            $patch403_params_min++;
        }

        $rules ="";
        $rules.="".
        
                    
        $this->header_start.
        "\n".'# Las directivas (líneas) entre «'.str_replace("# ","",$this->header_start).'» y «'.str_replace("# ","",$this->header_end).'» son'.
        "\n".'# generadas dinámicamente y solo deberían ser modificadas mediante filtros de WordPress.'.
        "\n".'# Cualquier cambio en las directivas que hay entre esos marcadores serán sobrescritas.'.
        //"\n".'# [DROOT]=['.ABSPATH.']'.
        //"\n".'# [DOCUMENT_ROOT]=['.$document_root.']'.
        //"\n".'# [DROOT]=['.$droot.']'.
        ($gzenabled?
        "\n".
        "\n# Si està 'gz' habilitat, habilitar compressió per a json.gz".
        "\n".'<FilesMatch index\.json\.gz$>'.
        "\n".' ForceType text/json'.
        "\n".' Header set Content-Encoding gzip'.
        "\n".'</FilesMatch>'.
        "\n"
        :'').

        "\n".'#Parse consulta json'.
        "\n".'RewriteCond %{REQUEST_URI} /wp-json/'.
        "\n".'RewriteRule . - [E=pRestURI:%{REQUEST_URI}]'.
        "\n".'RewriteRule . - [E=pRestQS:]'.
        "\n".'RewriteRule . - [E=pRestOQS:]'.
        "\n".'RewriteRule . - [E=pRestPATH:%{DOCUMENT_ROOT}/headless/wp-content/cache/apirest/]'.
        "\n".'RewriteCond %{QUERY_STRING} ^(.*)$'.
        "\n".'RewriteRule . - [E=pRestQS:%{QUERY_STRING}]'.
        "\n".'RewriteRule . - [E=pRestOQS:%{QUERY_STRING}]'.
        ($gzenabled?
        "\n".'RewriteCond %{HTTP:Accept-Encoding} gzip'.
        "\n".'RewriteRule . - [E=pRestGZ:.gz]'
        :'').
        "\n".'RewriteCond %{ENV:pRestQS} !^$'.
        "\n".'RewriteRule . - [E=pRestQS:%{ENV:pRestQS}/]'.
        "\n".''.
        ($patch403?
        "\n".'#Patch403 - Convertir "=","&" a "-","-"'.
        $patch403_rules.
        "\n"
        :"").
        "\n".'#Url cache final'.
        "\n".'RewriteRule . - [E=pRestURL:%{ENV:pRestPATH}%{ENV:pRestURI}%{ENV:pRestQS}index.json%{ENV:pRestGZ}]'.
        "\n".''.
        "\n".'#Si està en cache, retornar'.
        "\n".'RewriteCond %{ENV:pRestURL} /wp-json/'.
        "\n".'RewriteCond %{ENV:pRestURL} -f'.
        "\n".'RewriteRule ^(.*)$ %{ENV:pRestURL} [L]'.
        "\n".''.
        "\n".'#Si no està, seguir procès normal'.
        "\n".$this->header_end.
        "\n".'';


        $htaccess_file = ABSPATH.".htaccess";
        if ( file_exists($htaccess_file)) {
            $content = file_get_contents($htaccess_file);
            $parts = explode($this->header_start,$content);
            $start = get_array_value($parts,0,false);
            $mid = get_array_value($parts,1,false);
            $mid_parts = explode($this->header_end,$mid);
            $end = get_array_value($mid_parts,1,false);
            $mid = get_array_value($mid_parts,0,false);

            if ( strpos($start,$wordpress_start)!==false) {
                $end = $start . $end;
                $start = "";
            }


            //echo "<br>[START]---------------------";
            //echo $start;
            //echo "<br>[/START]<br><br>---------------------[MID]";
            //echo $mid;
            //echo "<br>[/MID]<br><br>---------------------[END]";
            //echo $end;
            //echo "<br>[/END]---------------------";
            
            $newcontent = $start.$rules.$end;
            file_put_contents($htaccess_file,$newcontent);



        }


    }

    
}
if ( is_admin() ) $pRestSettings = new pometaRestSettings();

function pRest_settings_get() {
		 $pRest_options = get_option( 'pRest_settings' ); // Array of All Options
		return $pRest_options;
}

function pRest_settings_get_option($option,$default=false) {
		$settings = pRest_settings_get();
		return get_array_value($settings,$option,$default);
}
function pRest_settings_get_path_placeholder() {
    return apply_filters("pRest/path/placeholder","rest/");
}
function pRest_settings_get_path() {

    //$upload_dir = wp_upload_dir();
    //$path = get_array_value($upload_dir,'basedir',false);
    $path = WP_CONTENT_DIR ."/cache";

    $settings = pRest_settings_get();
    $folder = get_array_value($settings,"path",false);
    if ( !$folder ) {
        $folder = pRest_settings_get_path_placeholder();
    }
    if ( substr_first_char($folder) != "/" ) { $folder="/".$folder; }
    if ( substr_last_char($folder)  != "/" ) { $folder.="/"; }
    $dir = $path.$folder;
    return $dir;
}

function pRest_settings_get_enabled() {
    $settings = pRest_settings_get();
    return get_array_value($settings,"enabled",false);
}
function pRest_settings_get_htaccess_patch_403_enabled() {
    $settings = pRest_settings_get();
    return get_array_value($settings,"htaccess_patch_403_enabled",false);
}
function pRest_settings_get_compress_enabled() {
    $settings = pRest_settings_get();
    return get_array_value($settings,"gzenabled",false);
}

function pRest_settings_get_file_life(){
    $settings = pRest_settings_get();
    return get_array_value($settings,"expire_minutes",false);
}
function pRest_settings_get_file_life_seconds(){
    $minutes = pRest_settings_get_file_life();
    $seconds = ($minutes ? $minutes * 60: 60);
    return $seconds;
}
add_action("init","pRestFilters");

function pRestFilters() {
    add_filter("rest_pre_echo_response", "pRestFilterResponse",99999999999999,3);
    



}
function pRest_get_request_cache_file($complete = false) {

    list ( $uri, $directory )= pRest_get_request_uri();
    
    
    if(substr_last_char($uri) == "/"){$uri.="/";}

    //$in = array("/","?","&","=");
    //$out = array("-","-","-","-");
    $in = array("?");
    $out=array("/");
    
    $patch403 = pRest_settings_get_htaccess_patch_403_enabled();

    if ( $patch403 ) {
        $in=array_merge(array("=","&"),$in);
        $out = array_merge(array("-","-"),$out);
    }

    $uri = str_replace($in,$out,$uri);
    if ( $complete ) {
        $uri = pRest_settings_get_path().$directory."/wp-json/".$uri."/";
    }
    $uri.="/index.json";
    $uri = str_replace("//","/",$uri);
    return $uri;
}

function pRest_get_request_uri() {
    global $_SERVER;

    $uri = get_array_value($_SERVER,"REQUEST_URI",false);
    $uri_params = explode("/wp-json/",$uri);
    $directory = get_array_value($uri_params,"0","no-domain");
    $uri = get_array_value($uri_params,"1","no-directory");
    return array($uri , $directory);

}
function pRest_get_expire_time_to($time,$cache_time = 0) {
    $ara = time();
    $compara = ($time+$cache_time);

    if ( $cache_time && $ara > $compara ) {
        return false;
    }

    $ara = new DateTime(date("Y-m-d H:i:s",time()));//fecha inicial
    $fecha2 = new DateTime(date("Y-m-d H:i:s",$compara));//fecha de cierre
    
    $intervalo = $ara->diff($fecha2);

    $dies = $intervalo->format("%d");
    $hores = $intervalo->format("%h");
    $minuts = $intervalo->format("%i");
    $segons = $intervalo->format("%s");

    if ( $dies == "0") {$dies = ""; }
    if ( $hores == "0" ) {$hores = ""; }
    if ( $minuts == "0") { $minuts = "";}
    if ( $segons == "0") {$segons = "";}

    if ( $dies) { $dies = sprintf(__("%s dies","pometaRestltd"),$dies);}
    if ( $hores ) { $hores = sprintf(__("%s hores","pometaRestltd"),$hores);}
    if ( $minuts ) { $minuts = sprintf(__("%s minuts","pometaRestltd"),$minuts);}
    if ( $segons ) { $segons = sprintf(__("%s segons","pometaRestltd"),$segons);}

    $total = ($dies?$dies:"");
    $total .= ($total?" ":"").($hores?$hores:"");
    $total .= ($total?" ":"").($minuts?$minuts:"");
    $total .= ($total?" ":"").($segons?$segons:"");

    if ( !$total ) {
        $total = __("S'està actualitzant ara","pometaRestltd");
    }

    return $total;
    
}
function pRestFilterResponse($result , $t, $request ) {
    $file = pRest_get_request_cache_file($complete = true);
    $result = pRestCacheCreate($file,$result);
    return $result;
}

function pRestCacheCreatePath($filename) {

    $total  = $filename;
    $droot = ABSPATH;
    $path = dirname(str_replace($droot,"",$total));
    $str = explode(DIRECTORY_SEPARATOR, $path);
    
    

    $dir = ABSPATH;
    if ( substr_last_char($dir) == DIRECTORY_SEPARATOR ) { $dir = substr($dir,0,strlen($dir)-1);}

    foreach ($str as $part) {
        $dir .= DIRECTORY_SEPARATOR. $part ;
        if (!is_dir($dir) && strlen($dir) > 0) {
            if ( !mkdir($dir)) {
                echo "<br>\n Can't create folder[".$dir."]";
            }
        }

        
    }
}
function pRestCacheCreate($filename,$result) {

    // Comprova si el directori està creat 
    $create = true;

    $prevent = array(
        "v1/contact-forms/",
        "v2/cache/clean",
        "v2/cache/expire"
    );


    if ( $prevent && is_array($prevent) && count($prevent)) {
        foreach($prevent as $endpoint ) {
            if ( strpos($filename,$endpoint) !== false) {
                $create=false;
                break;
            }
        }
    }

    if ( $create ) {

        $json = json_encode($result);
        //$json = substr($json,1,strlen($json)-2);

        pRestCacheCreatePath($filename);
        if(file_put_contents($filename,$json)) {
            if(!pRest_gzCompressFile($filename)) {
                //No existe "gzwrite" o error
            }
        }

    }

    return $result;
}


function pRestCacheIsExpired($filename) {
    
    $expired = false;
    
    $file_time = filemtime($filename);
    $file_life = pRest_settings_get_file_life_seconds();
    if ( !$file_life ) {
        return false;
    }
    $file_end = $file_time + $file_life;
    if ( $file_end < time()) {
        $expired=true;
    }
    return $expired;

}

function pRestCacheClean($result,$format = "EXPIRE", $dir="") {


    if ( is_object($dir)) {
        $dir = false;
    }

    if ( !$dir ) {
     $dir = pRest_settings_get_path();
    }

    if ( !isset($result["msg"])) {$result["msg"]=$format;}
    if ( !isset($result["files"])) {$result["files"]=0;}
    if ( !isset($result["directories"])) {$result["directories"]=0;}
    if ( !isset($result["info"])) {$result["info"]=array();}

    
    $files=0;
    $directories=0;



    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {

                if ($object != "." && $object != "..") {
                    $file = $dir."/".$object;

                    if (filetype($file) == "dir") {
                        $result=pRestCacheClean($result, $format, $file); 
                    }
                    else {

                        if ( $format == "CLEAN" ||  
                            ($format == "EXPIRE" && pRestCacheIsExpired($file)) 
                        ) {
                            $result["files"]++;
                            unlink($file);
                        }
                        if ( $format == "LIST") {
                            $result["files"]++;
                            $result["info"][]=array("file"=>$file,"time"=>filemtime($file),"size"=>filesize($file));
                        }
                    }
                }
        }
        reset($objects);
        if ( $format == "CLEAN") {
            rmdir($dir);
        }
        $result["directories"]++;

    }

    if ( $format  == "EXPIRE") {
        $result["directories"]=0;
    }

    return $result;
}

function pRest_gzCompressFile($source, $level = 9){
    if ( !function_exists("gzwrite")) {
        return false;
    }
    $dest = $source . '.gz';
    $mode = 'wb' . $level;
    $error = false;
    if ($fp_out = gzopen($dest, $mode)) { if ($fp_in = fopen($source,'rb')) { while (!feof($fp_in)) { gzwrite($fp_out,fread($fp_in, 1024 * 512)); }fclose($fp_in); } else {$error = true; } gzclose($fp_out); } else { $error = true; }
    if ($error) {return false; } else {return $dest;}
}

add_action("rest_api_init","pRest_init_new_routes");
function pRest_init_new_routes() {

    register_rest_route( 'wp/v2', '/cache/clean', array(
        'methods' => 'GET',
        'callback' => "pRest_routes_cache_clean",
        'permission_callback' => '__return_true'

    ) );

    register_rest_route( 'wp/v2', '/cache/expire', array(
        'methods' => 'GET',
        'callback' => "pRest_routes_cache_expire",
        'permission_callback' => '__return_true'

    ) );
}

function pRest_routes_cache_clean($dir=false) {
    return pRestCacheClean(array(),"CLEAN",$dir);
}

function pRest_routes_cache_expire($dir=false) {
    return pRestCacheClean(array(),"EXPIRE",(!is_object($dir)?$dir:false));
}



function pRest_Cron_Create() {

    if (! wp_next_scheduled ( 'pRestCacheCron' )) {
	   if ( wp_schedule_event(time(), '10min', 'pRestCacheCron') ) {
           return "created";
       }
       else {
           return "error";
       }
    }
    return "already";
}

